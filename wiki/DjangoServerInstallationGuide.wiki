#summary Server installation guide.
#labels Doc-Userguide

= Introduction =

The cv_web_tk server supports multiple components: 
 * mech_turk task server 
 * VOC competition server
 * Annotation storage and access server
 * CV Web models

This installation guide guide walks through the installation of the common components and the mech turk server. Other components can be installed separately as django applications.

The installation assumes a bare Ubuntu linux 9.10 machine. It has been tested on
 * Karmik Ubuntu (9.10) in vmware player (Link to final image).

These instructions assume no knowledge of django and the goal to install this server only. If you know, what's going on, feel free to skip steps and use other features. For example, you can use any database of your choice, change code and data locaitions, etc.


= Prerequisites =
 # Install Ubuntu 9.10
 # Install all package updates
 # Install mysql, python, python-mysqldb 
{{{
sudo apt-get install mysql-server python python-mysqldb 
}}}
 # Recommended: Install phpmyadmin. It greatly helps in database administration. It will ask, which server to configure. Choose apache2. Make sure to write down the passwords.
{{{
sudo apt-get install phpmyadmin
}}}
 # Install PIL (python imaging library) if it hasn't been installed. It's used for on-the-fly image manipulations and converting images.
{{{
sudo apt-get install python-imaging
}}}

= ROS install =

ROS provides great software management tools and many components of the server are ROS packages. For certain cases, the installation can be omitted, but it's really easy to install. It will download lots of stuff though.

The instructions come from [http://www.ros.org/wiki/ROS/Installation ros.org]. We create a system-wide install, but we don't really need full shared install (we skip marking as NO_BUILD):
{{{
sudo apt-get install build-essential python-yaml cmake subversion

wget --no-check-certificate http://ros.org/rosinstall -O ~/rosinstall
chmod 755 ~/rosinstall
sudo ~/rosinstall /opt/ros http://ros.org/rosconfigs/ros.rosconfig 
}}}


= Libraries and packages =

 # django 1.1.1
{{{
wget http://www.djangoproject.com/download/1.1.1/tarball/
tar xzvf Django-1.1.1.tar.gz
cd Django-1.1.1
sudo python setup.py install
}}}
 # Install boto (for Mechanical Turk integration) with a patch.
{{{
wget http://boto.googlecode.com/files/boto-1.8d.tar.gz
tar xvzf boto-1.8d.tar.gz
wget http://cv-web-annotation-toolkit.googlecode.com/files/boto-1.8d_patch
cd boto-1.8d
patch -p1 <../boto-1.8d_patch
sudo python setup.py install
}}}
 # django-tagging  (v.0.3.0 for django 1.0.2)
{{{
wget http://django-tagging.googlecode.com/files/django-tagging-0.3.tar.gz
tar xvzf django-tagging-0.3.tar.gz
cd django-tagging-0.3
sudo python setup.py install
}}}
 # django-registration
{{{
wget http://bitbucket.org/ubernostrum/django-registration/get/v0.7.tar.gz
tar xvzf v0.7.tar.gz
cd django-registration
sudo python setup.py install
}}}
 # rpc4django
{{{
wget http://www.davidfischer.name/wp-content/uploads/2010/01/rpc4django-0.1.7.tar.gz
tar xvfz rpc4django-0.1.7.tar.gz
cd rpc4django-0.1.7
python setup.py install
}}}

= Django code installation =

 # Set up a mysql database
   * Go to phpmyadmin at http://localhost/phpmyadmin
   * Choose create database (e.g. *crowd*)
   * Create a user for the database:
     * Go to database, click Privileges
     * Click create user (e.g. *crowd_django*), 
     * Click generate password and save it somewhere
     * Check "Grant all privileges" 
 # Choose server code location and create server dir
{{{
SRV_ROOT=/var/django
sudo mkdir $SRV_ROOT
sudo chown -R <<MY_USER>> $SRV_ROOT
cd $SRV_ROOT
django-admin.py createproject crowd_server
cd crowd_server
}}}
 # Download the code components from the SVN. Replace syrnick with your google code account. Or remove the user and https to get read-only code.
{{{
export GCUSER=syrnick
svn checkout https://cv-web-annotation-toolkit.googlecode.com/svn/trunk/django/web_annotations_server/mturk/ mturk/ --username $GCUSER
svn checkout https://cv-web-annotation-toolkit.googlecode.com/svn/trunk/django/web_annotations_server/templates/ templates/ --username $GCUSER
svn checkout https://cv-web-annotation-toolkit.googlecode.com/svn/trunk/django/web_annotations_server/packages/ packages/ --username $GCUSER
svn checkout https://cv-web-annotation-toolkit.googlecode.com/svn/trunk/django/web_annotations_server/snippets/ snippets/ --username $GCUSER
svn checkout https://cv-web-annotation-toolkit.googlecode.com/svn/trunk/django/web_annotations_server/datastore/ datastore/ --username $GCUSER
svn checkout https://cv-web-annotation-toolkit.googlecode.com/svn/trunk/django/web_annotations_server/default_project/ default_project/ --username $GCUSER
}}}
 # Copy default configuration over the initial project values.
{{{
cp default_project/*.py ./
}}}
 # Edit settings.py to specify your database connection and other local settings
 # Run syncdb to create the database tables:
{{{
python manage.py syncdb
}}}
 # Load initial configuration data
{{{
export PYTHONPATH=$PYTHONPATH:/var/django:/var/django/crowd_server
export DJANGO_SETTINGS_MODULE=crowd_server.settings
django-admin.py loaddata default_project/default.json
}}}
 # Create required data directories
{{{
sudo mkdir /var/datasets/
sudo mkdir /var/datasets/tasks/
sudo mkdir /var/datasets/segmentations/
sudo chown -R www-data /var/datasets/
sudo chown -R www-data /var/django
}}}
 # Run development server
{{{
python manage.py runserver localhost:8080
}}}

= Data locations = 

Data locations should be configured in settings.py.

Create these folders:

 * {{{/var/datasets/}}} - images will be stored in {{{/var/datasets/<session_name>/}}} (can have internal folder structure) 
 * {{{/var/datasets/tasks/}}}  - task definitions. (xml files for the annotation interface)
 * {{{/var/datasets/segmentations/}}}  - compressed segmentations storage. The bitmaps are compressed with zlib and encoded into plain text (each byte goes to two chars: 4 bits are encoded with A-P, A=0, P=15).



= Details =

 * check out the code (web_annotations_server)
   * Put the code in /var/django
   * Create /var/datasets

 * create user and database for django. Write them to settings.py. Grant all permissions to the created user on the specified database. 

 * Install django-registration
   * Install python-setuptools
   * Run easy_install django-registration
 * Install a local smtp server (to e-mail things from python)
 * Enable appropriate applications (mturk contains some templates used by other apps).
 * Run syncdb: {{{python manage.py syncdb}}}

 * Download the required javascripts into web_annotations_server/mturk/code/js/:
   * [http://vm7.willowgarage.com/code/all_js.tgz all_js.tgz]

 * Look into settings.py and set DJ_CODE_RT, DATASETS_ROOT

 * [optional] Run development server: {{{python manage.py runserver <host>:8080}}}

== Installing into Apache ==

This is probably wrong, but it does what I want. A better way to do it is to have a single virtual site for django.

 * Install mod-python (apt-get install libapache2-mod-python)
 * Put django.conf into /etc/apache2/conf.d/.
   * Edit it: change python paths; Correct the alias for /media. 
   * Enable/disable other configs
 * Include django.conf into /etc/apache2/sites-enabled/000-default
{{{
Include /etc/apache2/conf.d/django.conf
}}}
 * sudo apache2ctl restart