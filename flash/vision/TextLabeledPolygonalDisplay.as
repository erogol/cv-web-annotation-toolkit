/********************************************************************** Software License Agreement (BSD License)**  Copyright (c) 2008, University of Illinois at Urbana-Champaign*  All rights reserved.**  Redistribution and use in source and binary forms, with or without*  modification, are permitted provided that the following conditions*  are met:**   * Redistributions of source code must retain the above copyright*     notice, this list of conditions and the following disclaimer.*   * Redistributions in binary form must reproduce the above*     copyright notice, this list of conditions and the following*     disclaimer in the documentation and/or other materials provided*     with the distribution.*   * Neither the name of the University of Illinois nor the names of its*     contributors may be used to endorse or promote products derived*     from this software without specific prior written permission.**  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE*  POSSIBILITY OF SUCH DAMAGE.*********************************************************************//***** Author: Alexander Sorokin, Department of Computer Science,*                                  University of Illinois at Urbana-Champaign.* Advised by: David Forsyth.*****/package vision{	import flash.display.*;	import fl.controls.Label;	import flash.text.TextField;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.ui.Mouse;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.text.*;	import vision.ResizeMarker;	import vision.PolygonalDisplay;		dynamic public class TextLabeledPolygonalDisplay extends PolygonalDisplay	{				function TextLabeledPolygonalDisplay()		{			this.removeChild(m_label);			this.addChild(m_label2);			this.addChild(btnDone);			btnDone.addEventListener(MouseEvent.CLICK,onDoneClick);		}		override function onFinishShapeClick(event:MouseEvent):void {			var now:Date = new Date();			this.hitTime=now.getTime();			thePolygon.graphics.lineTo(ptsX[1], ptsY[1]);			this.Mode=IDLE;			btnFinishShape.visible=false;			btnRemoveLast.visible=false;			btnDone.visible=true;			redraw_this();		}				override public function setMode(new_mode:String)		{			this.Mode=new_mode;			if(this.Mode == PolygonalDisplay.DISPLAY){				this.gotoAndStop(5);				this.removeChild(m_label2);				this.removeChild(btnDone);						}else{				this.gotoAndStop(1);				this.addChild(m_label2);				this.addChild(btnDone);			}					}		function onDoneClick(event:MouseEvent):void{			var done_event:Event = new Event("my_input_finished");    		this.dispatchEvent(done_event);					disable_edit();		}				override public function read_xml_annotation(annotation:XML):void{			super.read_xml_annotation(annotation);		}				override public function get_object_name():String		{			return m_label2.text;		}				override public function set_object_name(new_name:String):void		{			this.m_label2.text=new_name;		}					}}