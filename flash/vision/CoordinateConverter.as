/********************************************************************** Software License Agreement (BSD License)**  Copyright (c) 2008, University of Illinois at Urbana-Champaign*  All rights reserved.**  Redistribution and use in source and binary forms, with or without*  modification, are permitted provided that the following conditions*  are met:**   * Redistributions of source code must retain the above copyright*     notice, this list of conditions and the following disclaimer.*   * Redistributions in binary form must reproduce the above*     copyright notice, this list of conditions and the following*     disclaimer in the documentation and/or other materials provided*     with the distribution.*   * Neither the name of the University of Illinois nor the names of its*     contributors may be used to endorse or promote products derived*     from this software without specific prior written permission.**  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE*  POSSIBILITY OF SUCH DAMAGE.*********************************************************************//***** Author: Alexander Sorokin, Department of Computer Science,*                                  University of Illinois at Urbana-Champaign.* Advised by: David Forsyth.*****/package vision{		import flash.geom.Point;		import flash.geom.Rectangle;				public class CoordinateConverter{						var oX,oY,sX,sY,oX2,oY2,sX2,sY2;						function CoordinateConverter(newBox:Rectangle,oldBox:Rectangle){				oX=(oldBox.x-newBox.x)/newBox.width*501;				oY=(oldBox.y-newBox.y)/newBox.height*501;				sX=(oldBox.width)/(newBox.width);				sY=(oldBox.height)/(newBox.height);				oX2=(oldBox.x-newBox.x);				oY2=(oldBox.y-newBox.y);				sX2=newBox.width/oldBox.width;				sY2=newBox.height/oldBox.height;			}					public function convert_pt(pt:Point):Point{				return new Point(convert_x(pt.x),convert_y(pt.y));			}			public function convert_x(x:Number):Number{				return x*sX+oX;			}			public function convert_y(y:Number):Number{				return y*sY+oY;			}			public function convert_w(w:Number):Number{				return w*sX;			}			public function convert_h(h:Number):Number{				return h*sY;			}			public function convert_object(o):void{				o.x=convert_x(o.x);				o.y=convert_y(o.y);				o.width=convert_w(o.width);				o.height=convert_h(o.height);			}			public function convert_container(o):void{				o.x=o.x-oX2;				o.y=o.y-oY2;				o.width=o.width*sX2;				o.height=o.height*sY2;			}		}}		