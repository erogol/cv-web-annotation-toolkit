/********************************************************************** Software License Agreement (BSD License)**  Copyright (c) 2009, Willow Garage, Inc.*  All rights reserved.**  Redistribution and use in source and binary forms, with or without*  modification, are permitted provided that the following conditions*  are met:**   * Redistributions of source code must retain the above copyright*     notice, this list of conditions and the following disclaimer.*   * Redistributions in binary form must reproduce the above*     copyright notice, this list of conditions and the following*     disclaimer in the documentation and/or other materials provided*     with the distribution.*   * Neither the name of the University of Illinois nor the names of its*     contributors may be used to endorse or promote products derived*     from this software without specific prior written permission.**  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE*  POSSIBILITY OF SUCH DAMAGE.*********************************************************************//***** Author: Alexander Sorokin, ****/package vision.video{	import flash.display.*;	import fl.controls.CheckBox;	import fl.controls.List;	import fl.data.DataProvider;	//import flash.display.Shape;	import fl.controls.Label;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.xml.XMLDocument;	import flash.xml.XMLNode;	import flash.text.*;	import flash.geom.*;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLLoaderDataFormat;	import flash.display.BitmapData;	import flash.geom.Rectangle;	import flash.utils.ByteArray;	import fl.events.SliderEvent;	import guid.GUID;		dynamic public class TimePositionCtl extends MovieClip	{		var time_zero;		var admin;		var mapping:Array;		public function TimePositionCtl(){			m_time_control.addEventListener(SliderEvent.THUMB_PRESS,onThumbPress);			m_time_control.addEventListener(SliderEvent.THUMB_DRAG,onThumbDrag);			m_time_control.addEventListener(SliderEvent.THUMB_RELEASE,onThumbRelease);						mapping=[-5,-4,-3,-2,-1,-0.8,-0.6,-0.4,-0.2,-0.1,0,0.1,0.2,0.4,0.6,0.8,1,2,3,4,5];		}		public function set_admin(new_admin):void{			admin=new_admin;					var player=admin.get_video_player();				}		public function onThumbPress(e:SliderEvent):void		{			time_zero=admin.get_video_player().playheadTime;		}		public function onThumbDrag(e:SliderEvent):void		{			//update_time(e.value);					}		public function onThumbRelease(e:SliderEvent):void		{			update_time(e.value);			m_time_control.value=10;		}		public function update_time(val):void		{			var offset=mapping[val];			var new_time=time_zero+offset;			var player=admin.get_video_player();			if(new_time<0)				new_time=0;			if(new_time>player.totalTime)				new_time=player.totalTime;			trace(new_time);			player.seek(new_time);		}	}}