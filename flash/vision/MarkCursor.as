/********************************************************************** Software License Agreement (BSD License)**  Copyright (c) 2008, University of Illinois at Urbana-Champaign*  All rights reserved.**  Redistribution and use in source and binary forms, with or without*  modification, are permitted provided that the following conditions*  are met:**   * Redistributions of source code must retain the above copyright*     notice, this list of conditions and the following disclaimer.*   * Redistributions in binary form must reproduce the above*     copyright notice, this list of conditions and the following*     disclaimer in the documentation and/or other materials provided*     with the distribution.*   * Neither the name of the University of Illinois nor the names of its*     contributors may be used to endorse or promote products derived*     from this software without specific prior written permission.**  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE*  POSSIBILITY OF SUCH DAMAGE.*********************************************************************//***** Author: Alexander Sorokin, Department of Computer Science,*                                  University of Illinois at Urbana-Champaign.* Advised by: David Forsyth.*****/package vision{	import flash.display.*;	//import flash.display.Shape;	import fl.controls.Label;	import flash.events.MouseEvent;	import flash.ui.Mouse;	import flash.events.Event;	import flash.geom.Point;	dynamic public class MarkCursor extends MovieClip	{		public var parent_box;		var mouseOffset:Point;				function MarkCursor()		{			this.addEventListener(MouseEvent.MOUSE_DOWN, pickUp);			this.addEventListener(MouseEvent.CLICK, killClickEvent);			parent_box=null;			mouseOffset=null;		}		public function setMarkerID(ID:int):void		{			this.gotoAndStop(ID);		}		function startDrag2(event:MouseEvent):void{			mouseOffset=new Point(this.x-event.stageX,this.y-event.stageY);			Mouse.hide();			var resize_event:Event = new Event("my_start_resize");			this.dispatchEvent(resize_event);		}		function stopDrag2():void{			mouseOffset=null;			Mouse.show();			var resize_event:Event = new Event("my_end_resize");			this.dispatchEvent(resize_event);		}		function pickUp(event:MouseEvent):void {			this.startDrag2(event);			event.target.stage.addEventListener(MouseEvent.MOUSE_MOVE,mouseMoveHandler);			this.stage.addEventListener(MouseEvent.MOUSE_UP, dropIt);			event.stopPropagation();		}		function dropIt(event:MouseEvent):void {			event.target.stage.removeEventListener(MouseEvent.MOUSE_MOVE,mouseMoveHandler);			this.stage.removeEventListener(MouseEvent.MOUSE_UP, dropIt);			//event.target.stopDrag();			this.stopDrag2();			event.stopPropagation();			var resize_move_event:Event = new Event("my_resize_marker_move");			this.dispatchEvent(resize_move_event);		}		function killClickEvent(event:MouseEvent):void {			event.stopPropagation();		}		private function mouseMoveHandler(event:MouseEvent):void {            //event.updateAfterEvent();			//this.parent_box;			if(mouseOffset!=null){				event.stopPropagation();				this.x=event.stageX+mouseOffset.x;				this.y=event.stageY+mouseOffset.y;				var sh:SiteHolder=null;				if(this.parent is SiteHolder){				 	sh = SiteHolder(this.parent);				}else{					if(this.parent.parent is SiteHolder)					{				 		sh = SiteHolder(this.parent.parent);					}				}				if(sh!=null) sh.clip_location_to_target(this);				if(parent_box!=null){					parent_box.do_resize_on_marker(this);				}else{					var resize_move_event:Event = new Event("my_resize_marker_move");					this.dispatchEvent(resize_move_event);				}				event.updateAfterEvent();			}        }			}}