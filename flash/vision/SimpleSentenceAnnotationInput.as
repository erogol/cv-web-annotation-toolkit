/********************************************************************** Software License Agreement (BSD License)**  Copyright (c) 2009, Willow Garage, Inc.*  All rights reserved.**  Redistribution and use in source and binary forms, with or without*  modification, are permitted provided that the following conditions*  are met:**   * Redistributions of source code must retain the above copyright*     notice, this list of conditions and the following disclaimer.*   * Redistributions in binary form must reproduce the above*     copyright notice, this list of conditions and the following*     disclaimer in the documentation and/or other materials provided*     with the distribution.*   * Neither the name of the University of Illinois nor the names of its*     contributors may be used to endorse or promote products derived*     from this software without specific prior written permission.**  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE*  POSSIBILITY OF SUCH DAMAGE.*********************************************************************//***** Author: Alexander Sorokin, ****/package vision.text{	import flash.display.*;	import fl.controls.CheckBox;	import fl.controls.List;	import fl.data.DataProvider;	import fl.events.DataChangeEvent;	//import flash.display.Shape;	import fl.controls.Label;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.xml.XMLDocument;	import flash.xml.XMLNode;	import flash.text.*;	import flash.geom.*;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLLoaderDataFormat;	import flash.display.BitmapData;	import flash.geom.Rectangle;	import flash.utils.ByteArray;	import fl.events.SliderEvent;	import guid.GUID;		dynamic public class SimpleSentenceAnnotationInput extends MovieClip	{		var admin;		public function SimpleSentenceAnnotationInput(){			m_text_annotation.addEventListener(Event.CHANGE,on_edit);		}		public function set_admin(new_admin):void{			admin=new_admin;					admin.get_model().get_current_event_DP().addEventListener(DataChangeEvent.DATA_CHANGE,on_change_event);		}				public function get_xml():XML{			var current_annotation=m_text_annotation.text;			return XML("<annotation><text>"+current_annotation+"</text></annotation>");		}		public function reset():void{			m_text_annotation.text="";		}				public function on_edit(event:Event)		{				var m=admin.get_model();			if(m.has_current_event())			{				var current_event=m.get_current_event();				current_event.set_annotation(this.get_xml());				m.update_or_set_event(current_event);			}		}														public function on_change_event(event:DataChangeEvent)		{			if(event.changeType=="invalidateAll")			{				var dp=event.target;				if(dp.length==0)				{					m_text_annotation.text="";				}else{					var current_item=dp.getItemAt(0);					var annotation=current_item.get_annotation();					if(annotation)					{						m_text_annotation.text=current_item.get_annotation().text.text();					}				}			}					}													}}