/********************************************************************** Software License Agreement (BSD License)**  Copyright (c) 2008, University of Illinois at Urbana-Champaign*  All rights reserved.**  Redistribution and use in source and binary forms, with or without*  modification, are permitted provided that the following conditions*  are met:**   * Redistributions of source code must retain the above copyright*     notice, this list of conditions and the following disclaimer.*   * Redistributions in binary form must reproduce the above*     copyright notice, this list of conditions and the following*     disclaimer in the documentation and/or other materials provided*     with the distribution.*   * Neither the name of the University of Illinois nor the names of its*     contributors may be used to endorse or promote products derived*     from this software without specific prior written permission.**  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE*  POSSIBILITY OF SUCH DAMAGE.*********************************************************************//***** Author: Alexander Sorokin, Department of Computer Science,*                                  University of Illinois at Urbana-Champaign.* Advised by: David Forsyth.*****/package vision{			import flash.display.*;	import vision.ResizeMarker;					import flash.events.Event;	import flash.events.FocusEvent;	import fl.events.ComponentEvent;	import fl.managers.*;	import flash.text.*;	import vision.AnnotationElement;		 	 dynamic public class Box2Marker2 extends Sprite implements AnnotationElement	 {		 		 public var t0:Number;		 public var t1:Number;		 public var creation_time:Number;		 public var last_modification_time:Number;  		 public var detail_input_specs;		 public var resize_markers:Array;		 var tag:TextField;		 		 var x0,x1,y0,y1;		 var m1,m2,m3,m4:vision.ResizeMarker;		 var box_width:Number;		 var box_height:Number;		 var line_alpha:Number;					 var m_show_tag:Boolean; 		 var object_name:String;		 		 var fg_color:int;		 var bg_color:int;		 	 		 		 function Box2Marker2()		 {			var now:Date = new Date();			creation_time=now.getTime();			last_modification_time=now.getTime();			t0=now.getTime();			t1=now.getTime();			detail_input_specs=null;			tag=null;			this.addEventListener(Event.RESIZE,on_resize);			box_height=1;			box_width=1;						object_name=null;			//this.addEventListener(FocusEvent.FOCUS_IN, on_focus_in);			//this.addEventListener(FocusEvent.FOCUS_OUT, on_focus_out);		 }     	private function draw():void {			var w=box_width;			var h=box_height;            graphics.clear();			var lw=1;			if(this.rootObj)			{				lw=this.rootObj.get_default_line_width();			}			graphics.lineStyle(lw, fg_color, this.line_alpha, true, LineScaleMode.VERTICAL,				                               CapsStyle.NONE, JointStyle.MITER, 10);			graphics.beginFill(fg_color,0.1);            graphics.drawRect(lw/2, lw/2, w-lw/2, h-lw/2);            graphics.endFill();         }		 public function set_color(newC:int):void{		 	fg_color=newC;		 }		 public function set_lbl(txt:String):void{			if(tag==null){				tag=new TextField();								tag.background=false;				tag.opaqueBackground=0xFFFFFF;				tag.autoSize=TextFieldAutoSize.LEFT;								tag.textColor=0x000000;				tag.text=txt;				//tag.width=Math.min(tag.width,this.width)				//tag.height=Math.min(tag.height,this.height)				//tag.x=this.x+box_width/2-tag.width/2;				//tag.y=this.y+box_height/2-tag.height/2;				//tag.x=this.x;//+bW/2-tag.width/2;				//tag.y=this.y;//bY+bH/2-tag.height/2;				this.parent.addChild(tag);								if(!m_show_tag)				{					tag.visible=false;				}			}else{				tag.text=txt;				//tag.width=Math.min(tag.width,this.width)				//tag.height=Math.min(tag.height,this.height)				//tag.x=this.x+box_width/2-tag.width/2;				//tag.y=this.y+box_height/2-tag.height/2;			}			update_tag_location();			//this.addChild(tag);		 }		 public function update_tag_location()		 {				if(tag!=null){					//tag.x=this.x+box_width/2-tag.width/2;					//tag.y=this.y+box_height/2-tag.height/2;					tag.x=this.x;					tag.y=this.y;				}		}		 public function highlight_invalid():void{		 	//gotoAndStop(3);		 }		 public function get_xml():String{			 return ""		 }		 var rootObj;		 public function set_root(newRootObj):void{			 this.rootObj=newRootObj;			 if(rootObj)			 {				 m_show_tag=this.rootObj.getParameters().getParam_Boolean("/taskdef/bbox2_marker/show_object_tag",true);				 this.line_alpha=this.rootObj.getParameters().getParam_Float("/taskdef/bbox2_marker/line_alpha",0.7);			 }else{				 m_show_tag=true;				 this.line_alpha=0.7;			 }		 }		 		 public function set_box(lx,ly,lw,lh):void{			x=lx;			y=ly;			box_width=lw;			box_height=lh;			update_tag_location();			draw();		}		public function getVisibility():Number{			return box_width*box_height;		}				public function on_start_resize(e:Event):void{			hide_tag();		}		public function on_end_resize(e:Event):void{			show_tag();		}		public function setEditMode():void{			 resize_markers=new Array();			 			 this.x0=x;			 this.y0=y;			 this.x1=x+box_width-1;			 this.y1=y+box_height-1;			 			 m1=new vision.ResizeMarker();			 m1.x=x0;			 m1.y=y0;			 m1.addEventListener("my_resize_marker_move", on_resize_marker_move);			 m1.addEventListener("my_start_resize", on_start_resize);			 m1.addEventListener("my_end_resize", on_end_resize);			 m1.idx=1;			 this.parent.addChild(m1);			 			 m2=new vision.ResizeMarker();			 m2.x=x1;			 m2.y=y0;			 m2.addEventListener("my_resize_marker_move", on_resize_marker_move);			 m2.addEventListener("my_start_resize", on_start_resize);			 m2.addEventListener("my_end_resize", on_end_resize);			 m2.idx=2;			 this.parent.addChild(m2);			 m3=new vision.ResizeMarker();			 m3.x=x0;			 m3.y=y1;			 m3.addEventListener("my_resize_marker_move", on_resize_marker_move);			 m3.addEventListener("my_start_resize", on_start_resize);			 m3.addEventListener("my_end_resize", on_end_resize);			 m3.idx=3;			 this.parent.addChild(m3);			 m4=new vision.ResizeMarker();			 m4.x=x1;			 m4.y=y1;			 m4.addEventListener("my_resize_marker_move", on_resize_marker_move);			 m4.addEventListener("my_start_resize", on_start_resize);			 m4.addEventListener("my_end_resize", on_end_resize);			 m4.idx=4;			 this.parent.addChild(m4);			 			 var start_edit_event:Event = new Event("my_start_edit_mode");			 this.dispatchEvent(start_edit_event);			 rootObj.the_sites_holder.hideAll();			 this.show();			}			public function hide():void{				this.visible=false;				if(this.tag!=null)				{					this.tag.visible=false;				}			}			public function show():void{				this.visible=true;				if(this.tag!=null)				{					this.tag.visible=true;				}			}			public function hide_tag():void{				if(this.tag!=null)				{					this.tag.visible=false;				}			}			public function show_tag():void{				if(this.tag!=null)				{					this.tag.visible=true;				}			}			public function notify_on_focus():void{				 var start_edit_event:Event = new Event("my_start_edit_mode");				 this.dispatchEvent(start_edit_event);			}						public function removeEditMode():void{				this.parent.removeChild(m1);				this.parent.removeChild(m2);				this.parent.removeChild(m3);				this.parent.removeChild(m4);								var finish_edit_event:Event = new Event("my_finish_edit_mode");				this.dispatchEvent(finish_edit_event);			 	rootObj.the_sites_holder.showAll();							}			public function on_resize_marker_move(event:Event):void			{				var m=vision.ResizeMarker(event.target);								do_resize_on_marker(m);			}			function flip_lr():void{				var xtmp=x0;				x0=x1;x1=x0;				box_width=-box_width;				var m;				m=m1;				m1=m2;m2=m;				m=m3;				m3=m4;m4=m;				m1.idx=1;				m2.idx=2;				m3.idx=3;				m4.idx=4;			}			function flip_ud():void{				var ytmp=y0;				y0=y1;y1=y0;				box_height=-box_height;				var m;				m=m1;				m1=m3;m3=m;				m=m2;				m2=m4;m4=m;				m1.idx=1;				m2.idx=2;				m3.idx=3;				m4.idx=4;			}			public function do_resize_on_marker(m:vision.ResizeMarker):void			{				if(m.idx==1){ //upper_left					this.x0=m.x;					this.y0=m.y;				}							if(m.idx==2){ //upper_right					this.x1=m.x;					this.y0=m.y;				}							if(m.idx==3){ //lower_left					this.x0=m.x;					this.y1=m.y;				}							if(m.idx==4){ //lower_right					this.x1=m.x;					this.y1=m.y;				}							this.x=x0;				this.y=y0;				this.box_width=x1-x0;				this.box_height=y1-y0;				if(box_width<0)				{					flip_lr();				}				if(box_height<0)				{					flip_ud();				}				   				m1.x=x0;				m1.y=y0;				m2.x=x1;				m2.y=y0;				m3.x=x0;				m3.y=y1;				m4.x=x1;				m4.y=y1;				if(tag!=null){					tag.x=this.x+box_width/2-tag.width/2;					tag.y=this.y+box_height/2-tag.height/2;				}				update_tag_location();				draw();						}					public function on_resize(event:Event):void			{				if(tag!=null){					tag.x=this.x+box_width/2-tag.width/2;					tag.y=this.y+box_height/2-tag.height/2;									}				draw();			}			public function on_set_attr_text(event:Event):void{				tag.text=tag.text+this.detail_input_specs.get_summary_text();			}						public function set_object_name(new_name:String):void{				object_name=new_name;				tag.text=object_name;//+this.detail_input_specs.get_summary_text();			}						public function switch_class(new_name:String):void{				set_object_name(new_name);			}						public function delete_element():void{				if(tag!=null){					this.parent.removeChild(tag);				}				var element_deleted_event:Event = new Event("element_deleted");				this.dispatchEvent(element_deleted_event);				this.parent.removeChild(this);			}							 }}