/********************************************************************** Software License Agreement (BSD License)**  Copyright (c) 2008, University of Illinois at Urbana-Champaign*  All rights reserved.**  Redistribution and use in source and binary forms, with or without*  modification, are permitted provided that the following conditions*  are met:**   * Redistributions of source code must retain the above copyright*     notice, this list of conditions and the following disclaimer.*   * Redistributions in binary form must reproduce the above*     copyright notice, this list of conditions and the following*     disclaimer in the documentation and/or other materials provided*     with the distribution.*   * Neither the name of the University of Illinois nor the names of its*     contributors may be used to endorse or promote products derived*     from this software without specific prior written permission.**  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE*  POSSIBILITY OF SUCH DAMAGE.*********************************************************************//***** Author: Alexander Sorokin, Department of Computer Science,*                                  University of Illinois at Urbana-Champaign.* Advised by: David Forsyth.*****/package vision{			import flash.display.*;		//import flash.display.Shape;	import fl.controls.Label;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;	import flash.events.Event;	import flash.ui.Mouse;		import vision.CoordinateConverter;		import flash.geom.Point;	import flash.geom.Rectangle;	import vision.Box2Marker2;	import vision.MarkCursor;	import flash.text.*;	 	 dynamic public class BBox2Input extends MovieClip	 {		public const IDLE:String = "idle";		public const EDITING_BOX:String = "edit_box";		public const READY:String = "ready";				public const DISPLAY:String = "display";		public var boxes:Array;				public var tokens:Array;		public var keys:Array;		public var clickTimes:Array;		public var numPts:Number;		public var thePolygon:Shape;		public var detail_object=null;		public var parent_display=null;		public var parent_tag=null;		public var parent_polygon=null;		public var theBox=null;				public var hitTime:Number;		public var now:Date = new Date();				public var makeActive;				public var lineColor;		public var bbox;				public var m_current_marker:vision.Box2Marker2;		public var m_child_data_points:Array;		public var Mode=IDLE;				public var min_size:int;		public var rootObj;				public var allow_edit:Boolean;				//public var m_mark_cursor:vision.MarkCursor;		function BBox2Input(){			hitTime=now.getTime();			btnRemoveLast.visible=false;			btnDone.visible=false;			theGuide.gotoAndStop(1);			theGuide.visible=true;			btnRemoveLast.addEventListener(MouseEvent.CLICK, onRemoveLastSegmentClick);			btnDone.addEventListener(MouseEvent.CLICK, onBtnDoneClick);			pdClickArea.addEventListener(MouseEvent.MOUSE_DOWN, startBox);			pdClickArea.addEventListener(MouseEvent.MOUSE_UP, endBox);			pdClickArea.addEventListener(MouseEvent.MOUSE_MOVE, updateBox);			pdClickArea.addEventListener(MouseEvent.CLICK, killClickEvent);			//m_current_marker.addEventListener(MouseEvent.MOUSE_UP, endBox);			//m_current_marker.addEventListener(MouseEvent.MOUSE_MOVE, updateBox);			numPts=0;			boxes=new Array();			m_child_data_points=new Array();			//m_mark_cursor//= new vision.MarkCursor();						pdClickArea.addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);            pdClickArea.addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);            //cursor = new CustomCursor();            //addChild(cursor);			m_mark_cursor.visible=false;            pdClickArea.addEventListener(Event.MOUSE_LEAVE, mouseLeaveHandler);			pdClickArea.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDownHandler);						allow_edit=true;			min_size=-1;		}		 public function set_root(newRootObj):void{			 this.rootObj=newRootObj;		 }		private function onKeyDownHandler(event:KeyboardEvent):void{			if(this.Mode == this.DISPLAY){				return;			}			if(event.keyCode == 13){				onBtnDoneClick(null);			}		}				        private function mouseOverHandler(event:MouseEvent):void {			if(this.Mode == this.DISPLAY){				return;			}            //trace("mouseOverHandler");            Mouse.hide();			if(m_mark_cursor!=null){				m_mark_cursor.visible=true;			}			pdClickArea.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);        }        private function mouseOutHandler(event:MouseEvent):void {			if(this.Mode == this.DISPLAY){				return;			}            //trace("mouseOutHandler");            Mouse.show();			if(m_mark_cursor!=null){				m_mark_cursor.visible=false;			}            pdClickArea.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);            //cursor.visible = false;        }		private function mouseLeaveHandler(event:Event):void {			if(this.Mode == this.DISPLAY){				return;			}			            //trace("mouseLeaveHandler");            mouseOutHandler(new MouseEvent(MouseEvent.MOUSE_MOVE));        }		private function mouseMoveHandler(event:MouseEvent):void {			if(this.Mode == this.DISPLAY){				return;			}            //trace("mouseMoveHandler");			var p2:Point=pdClickArea.globalToLocal(new Point(event.stageX,event.stageY));            m_mark_cursor.x = p2.x;            m_mark_cursor.y = p2.y;            event.updateAfterEvent();            m_mark_cursor.visible = true;        }				public function get_num_boxes():Number{			return boxes.length;		}		public function get_xml_annotation():String		{					var object_name=this.label.split('_')[0];			var object_sqn=this.label.split('_')[1];						var iBox=get_num_boxes();			var xmlStr:String="";			//xmlStr +='<bbox2 name="'+ object_name +'" sqn="'+ object_sqn +'" >\n';					for(var iB=0;iB<iBox;iB++){				var b:vision.Box2Marker2=boxes[iB];				var bx=b.x;				var by=b.y;				var bw=b.width;				var bh=b.height;								xmlStr +='<bbox name="'+ object_name +'" sqn="'+ (iB+1) +'" left="'+ bx +'" top="'+ by +'" width="'+ bw +'" height="'+ bh +'">\n';								var lx=bx;				var ly=by;				var t =0;								xmlStr +='\t<pt x="'+lx+'" y="'+ly+'" ct="'+t+'"/>\n';								lx=bx+bw;				ly=by+bh;				t =0;								xmlStr +='\t<pt x="'+lx+'" y="'+ly+'" ct="'+t+'"/>\n';				if(b.detail_input_specs){					xmlStr += '\t<detail>\n';					xmlStr += b.detail_input_specs.get_xml_annotation();					xmlStr +='\t</detail>\n';				}				xmlStr += '</bbox>\n';			}			//xmlStr += '</bbox2>\n';			return xmlStr;		}				public function set_xml_annotation(bboxes):void		{			//var nm=bboxes.@name;			//var sqn=bboxes.@sqn;			//this.data=nm+"_"+sqn;			//this.label=this.data;			var iB=0;			//for each(var o in bboxes.bbox){			for each(var o in bboxes){				//var bboxInput:BBoxInput=new BBoxInput();				//bboxInput.setXML(o);				//<bbox name="lamp" sqn="1" left="334.89000000000004" top="27.067500000000003" width="23.625" height="20.11500000000001"/>							var lx,ly,lw,lh,bX,bY,bW,bH;				lx=o.@left;				ly=o.@top;				lw=o.@width;				lh=o.@height;												m_current_marker=new vision.Box2Marker2();				m_current_marker.set_root(rootObj);				m_current_marker.set_color(rootObj.color_manager.getColor());				m_current_marker.set_box(lx,ly,lw,lh);				m_current_marker.xml_annotation=o;				boxes[iB]=m_current_marker;				if ((lw<=1) || (lh<=1)){					m_current_marker.highlight_invalid();				}else{					//m_current_marker.gotoAndStop(2);				}				this.addChild(m_current_marker);								//var txt=sqn+"/"+o.@sqn+" "+o.@name;				m_current_marker.set_lbl(o.@name);				var nm=o.@name;				var sqn=o.@sqn;				this.data=nm+"_"+sqn;				this.label=this.data;				/*				var tag:TextField=new TextField();				tag.background=false;				tag.autoSize=TextFieldAutoSize.RIGHT;								this.addChild(tag);				tag.x=Number(lx);//+bW/2-tag.width/2;				tag.y=Number(ly)+tag.height/2;//bY+bH/2-tag.height/2;										tag=new TextField();								tag.text=sqn+"/"+o.@sqn+" "+o.@name;								tag.background=false;				tag.autoSize=TextFieldAutoSize.RIGHT;								this.addChild(tag);				tag.x=Number(lx)+2;//+bW/2-tag.width/2;				tag.y=Number(ly)+tag.height/2+2;//bY+bH/2-tag.height/2;									tag.textColor=0xFFFFFF;*/							iB=iB+1;			}			allow_edit=false;		}				function startBox(event:MouseEvent):void {						if(this.Mode == this.IDLE){				var p2:Point=pdClickArea.globalToLocal(new Point(event.stageX,event.stageY));					m_current_marker=new vision.Box2Marker2();				m_current_marker.set_root(rootObj);				m_current_marker.set_color(rootObj.color_manager.getColor());				m_current_marker.set_box(p2.x,p2.y,0,0);				m_current_marker.x0=p2.x;				m_current_marker.y0=p2.y;				m_current_marker.addEventListener(MouseEvent.MOUSE_UP, endBox);				m_current_marker.addEventListener(MouseEvent.MOUSE_MOVE, updateBox);					pdClickArea.addChild(m_current_marker);				var object_name=this.label.split('_')[0];				m_current_marker.set_lbl(object_name);								boxes.push(m_current_marker);					this.Mode = this.EDITING_BOX			}		}		public function update_coordinate_system(newCoords:Rectangle,oldCoords:Rectangle):void		{			var converter=new vision.CoordinateConverter(newCoords,oldCoords);			for each(var o:Object in boxes){				var b:Box2Marker2=vision.Box2Marker2(o);				b.set_box(converter.convert_x(b.x),converter.convert_y(b.y),converter.convert_w(b.width),converter.convert_h(b.height));				if(b.tag!=null){					converter.convert_object(b.tag);				}			}		}		function endBox(event:MouseEvent):void {			if(	this.Mode == this.EDITING_BOX){				var p2:Point=pdClickArea.globalToLocal(new Point(event.stageX,event.stageY));				var l=Math.min(p2.x,m_current_marker.x0);				var t=Math.min(p2.y,m_current_marker.y0);				var w=Math.abs(p2.x-m_current_marker.x0);				var h=Math.abs(p2.y-m_current_marker.y0);								this.Mode = this.IDLE;				btnDone.visible=true;			}		}		function updateBox(event:MouseEvent):void {			if(	this.Mode == this.EDITING_BOX){				var x2=event.stageX;				var y2=event.stageY;				var p2:Point=pdClickArea.globalToLocal(new Point(x2,y2));				var w=Math.abs(p2.x-m_current_marker.x0);				var h=Math.abs(p2.y-m_current_marker.y0);								var new_x=Math.min(p2.x,m_current_marker.x0);				var new_y=Math.min(p2.y,m_current_marker.y0);								var new_width=Math.abs(w);				var new_height=Math.abs(h);				m_current_marker.set_box(new_x,new_y,new_width,new_height);								/*if ( (w<=0) || (h<=0) ){					w=0;h=0;				}else{					if(min_size>0){						w=Math.max(min_size,w);						h=Math.max(min_size,h);					}else{						w=Math.max(0,w);						h=Math.max(0,h);					}				}				m_current_marker.width=w;				m_current_marker.height=h;				m_current_marker.on_resize(null);*/			}		}				function killClickEvent(event:MouseEvent):void {		}		function onRemoveLastSegmentClick(event:MouseEvent):void		{			if(this.Mode == EDITING_BOX || this.Mode == IDLE)			{				var now:Date = new Date();				this.hitTime=now.getTime();							if(this.numPts>0)				{					var iBox=get_num_boxes();										if(boxes[iBox].tag!=null)						this.pdClickArea.removeChild(boxes[iBox].tag);					this.pdClickArea.removeChild(boxes[iBox]);					this.Mode=IDLE;					boxes.pop();				}							if(this.numPts==0){					btnDone.visible=false;				}			}		}				function setDisplayMode():void		{			this.Mode = DISPLAY;			var iBox=get_num_boxes();					var lbl=this.data;			var class_name=lbl.split("_")[0]			for(var i=0;i<iBox;i++){				//boxes[i].gotoAndStop(2);				//boxes[i].set_lbl(class_name);				/*var tag:TextField=new TextField();							tag.text=lbl.split("_")[1];				if(iBox>1)				{					tag.text=tag.text+"/"+i;				}				tag.opaqueBackground=0xFFFFFF;				tag.autoSize=TextFieldAutoSize.RIGHT;							this.pdClickArea.addChild(tag);				tag.x=boxes[i].x;//-tag.width/2;				tag.y=boxes[i].y+tag.height/2;						*/					}			this.gotoAndStop(2);			pdClickArea.gotoAndStop(2);					}							function onBtnDoneClick(event:MouseEvent):void		{			if(this.Mode == IDLE && get_num_boxes()>0)			{				setDisplayMode();				var iBox=get_num_boxes();				for(var i=0;i<iBox;i++){					boxes[i].addEventListener(MouseEvent.CLICK,onBoxDoubleClick);					boxes[i].idx=i;				}								var done_event:Event = new Event("my_input_finished");				this.dispatchEvent(done_event);										pdClickArea.removeEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);				pdClickArea.removeEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);				pdClickArea.removeEventListener(Event.MOUSE_LEAVE, mouseLeaveHandler);			}else{			}		}				public function enable_edit():void{			if(allow_edit==false){				allow_edit=true;				var iBox=get_num_boxes();				for(var i=0;i<iBox;i++){						boxes[i].addEventListener(MouseEvent.CLICK,onBoxDoubleClick);						boxes[i].idx=i;				}						}		}		public function disable_edit():void{			allow_edit=false;			try			{				var iBox=get_num_boxes();				for(var i=0;i<iBox;i++){						boxes[i].removeEventListener(MouseEvent.CLICK,onBoxDoubleClick);				}						}catch(e){			}		}				function onBoxDoubleClick(event:MouseEvent):void{			if(!allow_edit){				return;			}			if(rootObj.active_marker!=null){				rootObj.active_marker.removeEditMode();				rootObj.active_marker=null;			}			this.parent.addChild(this);			var box:vision.Box2Marker2=vision.Box2Marker2(event.currentTarget);						box.setEditMode();			rootObj.active_marker=box;					}	} } 