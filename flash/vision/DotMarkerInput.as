/********************************************************************** Software License Agreement (BSD License)**  Copyright (c) 2008, University of Illinois at Urbana-Champaign*  All rights reserved.**  Redistribution and use in source and binary forms, with or without*  modification, are permitted provided that the following conditions*  are met:**   * Redistributions of source code must retain the above copyright*     notice, this list of conditions and the following disclaimer.*   * Redistributions in binary form must reproduce the above*     copyright notice, this list of conditions and the following*     disclaimer in the documentation and/or other materials provided*     with the distribution.*   * Neither the name of the University of Illinois nor the names of its*     contributors may be used to endorse or promote products derived*     from this software without specific prior written permission.**  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE*  POSSIBILITY OF SUCH DAMAGE.*********************************************************************//***** Author: Alexander Sorokin, Department of Computer Science,*                                  University of Illinois at Urbana-Champaign.* Advised by: David Forsyth.*****/package vision{		import flash.display.*;		//import flash.display.Shape;	import fl.controls.Label;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.net.URLLoader;	import flash.net.URLRequest;	//import SelectedPersonMark;	 	 dynamic public class DotMarkerInput extends MovieClip	 {		public var ptsX:Array;		public var ptsY:Array;		public var keys:Array;		public var cls;		function DotMarkerInput(){					}								var all_polygons:Array=new Array();		function person_loaded(event:Event):void		{			var loader:URLLoader = URLLoader(event.target);			var lines:Array=loader.data.split("\n")									var ptsX:Array=new Array;			var ptsY:Array=new Array;			ptsX.push(0);			ptsY.push(0);			for(var iL=0;iL<lines.length;iL++)			{				var pts:Array=lines[iL].split(" ");					if(pts.length<3)				{					continue;				}				ptsX.push(int(pts[0]));				ptsY.push(int(pts[1]));												//var markCls:Class=flash.utils.getDefinitionByName("SelectedPersonMark");				var mark;				if(pts[2]=="1"){					mark=new SelectedPersonMark();				}else if(pts[2]=="2"){					mark=new BlockedPersonMark();				}				mark.x=int(pts[0]);				mark.y=int(pts[1]);				this.addChild(mark);			}			}		var annotation_loaders:Array=new Array();				public function load_from_url_simple(url:String):void{			var ldr:URLLoader;				ldr=new URLLoader();							var req:URLRequest = new URLRequest(url);				annotation_loaders.push(ldr)					ldr.addEventListener(Event.COMPLETE, person_loaded);				ldr.load(req);				}	 }}