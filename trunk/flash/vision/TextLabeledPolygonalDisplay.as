/********************************************************************** Software License Agreement (BSD License)**  Copyright (c) 2008, University of Illinois at Urbana-Champaign*  All rights reserved.**  Redistribution and use in source and binary forms, with or without*  modification, are permitted provided that the following conditions*  are met:**   * Redistributions of source code must retain the above copyright*     notice, this list of conditions and the following disclaimer.*   * Redistributions in binary form must reproduce the above*     copyright notice, this list of conditions and the following*     disclaimer in the documentation and/or other materials provided*     with the distribution.*   * Neither the name of the University of Illinois nor the names of its*     contributors may be used to endorse or promote products derived*     from this software without specific prior written permission.**  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE*  POSSIBILITY OF SUCH DAMAGE.*********************************************************************//***** Author: Alexander Sorokin, Department of Computer Science,*                                  University of Illinois at Urbana-Champaign.* Advised by: David Forsyth.*****/package vision{	import flash.display.*;	import fl.controls.Label;	import flash.text.TextField;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.ui.Mouse;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.text.*;	import vision.ResizeMarker;	import vision.PolygonalDisplay;		dynamic public class TextLabeledPolygonalDisplay extends PolygonalDisplay	{				function TextLabeledPolygonalDisplay()		{			this.m_edit_ctrl.m_label.visible=false;			this.m_edit_ctrl.m_label2.visible=true;			this.m_edit_ctrl.btnDone.visible=true;			this.m_edit_ctrl.btnDone.addEventListener(MouseEvent.CLICK,this.onDoneClick);			pdClickArea.visible=false;			//btnCancel.addEventListener(MouseEvent.CLICK, onCancelClick);		}		override function onFinishShapeClick(event:MouseEvent):void {			var now:Date = new Date();			this.hitTime=now.getTime();			thePolygon.graphics.lineTo(ptsX[1], ptsY[1]);			if(this.allow_selection)			{				this.Mode=SELECTION;						}else{				this.Mode=IDLE;			}			btnFinishShape.visible=false;			this.m_edit_ctrl.btnRemoveLast.visible=false;			this.m_edit_ctrl.btnDone.visible=true;			this.stage.focus=this.m_edit_ctrl.m_label2;			//this.m_label2.focus();			this.m_edit_ctrl.m_label2.setSelection(0,this.m_edit_ctrl.m_label2.text.length);			redraw_this();		}				override public function setMode(new_mode:String)		{			this.Mode=new_mode;			if(this.Mode == PolygonalDisplay.DISPLAY || this.Mode==PolygonalDisplay.SELECTION){				m_edit_ctrl.visible=false;				/*				try{					this.removeChild(m_label2);					this.removeChild(btnDone);				}catch(e){				}*/						}else{				m_edit_ctrl.visible=true;				/*this.gotoAndStop(1);				this.addChild(m_label2);				this.addChild(btnDone);				*/			}							}				override public function enable_edit2():void{			super.enable_edit2();									/*if(allow_edit==false){				setMode(PolygonalDisplay.SELECT);								thePolygon.addEventListener(MouseEvent.CLICK,onBoxDoubleClick);				allow_edit=true;				btnCancel.visible=false;								btnFinishShape.addEventListener(MouseEvent.CLICK, onFinishShapeClick);				pdClickArea.removeListener(MouseEvent.CLICK, handleRegularClick);				//btnRemoveLast.addEventListener(MouseEvent.CLICK, onRemoveLastSegmentClick);				//btnCancel.addEventListener(MouseEvent.CLICK, onCancelClick);				//pdClickArea.addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);            	//pdClickArea.addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);			}*/		}				override public function onDoneClick(event:MouseEvent):void{			if(this.get_object_name()=="type-object-name")			{				rootObj.show_error("Type object name!");				return;			}			rootObj.clear_error();			var done_event:Event = new Event("my_input_finished");    		this.dispatchEvent(done_event);					disable_edit();			removeEditMode();			if (this.allow_selection) {				enable_edit2();				this.Mode=SELECTION;			}		}				override public function read_xml_annotation(annotation:XML):void{			super.read_xml_annotation(annotation);		}				override public function get_object_name():String		{			return this.m_edit_ctrl.m_label2.text;		}				override public function set_object_name(new_name:String):void		{			this.m_edit_ctrl.m_label2.text=new_name;		}					}}