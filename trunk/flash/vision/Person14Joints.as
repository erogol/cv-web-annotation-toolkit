/********************************************************************** Software License Agreement (BSD License)**  Copyright (c) 2008, University of Illinois at Urbana-Champaign*  All rights reserved.**  Redistribution and use in source and binary forms, with or without*  modification, are permitted provided that the following conditions*  are met:**   * Redistributions of source code must retain the above copyright*     notice, this list of conditions and the following disclaimer.*   * Redistributions in binary form must reproduce the above*     copyright notice, this list of conditions and the following*     disclaimer in the documentation and/or other materials provided*     with the distribution.*   * Neither the name of the University of Illinois nor the names of its*     contributors may be used to endorse or promote products derived*     from this software without specific prior written permission.**  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE*  POSSIBILITY OF SUCH DAMAGE.*********************************************************************//***** Author: Alexander Sorokin, Department of Computer Science,*                                  University of Illinois at Urbana-Champaign.* Advised by: David Forsyth.*****/package vision{				import flash.display.*;		//import flash.display.Shape;		import fl.controls.Label;		import flash.events.MouseEvent;		import flash.events.Event;	 	 dynamic public class Person14Joints extends MovieClip	 {		public const IDLE:String = "idle";		public const EDITING:String = "edit";		public const READY:String = "ready";		public var ptsX:Array;		public var ptsY:Array;		public var keys:Array;		public var clickTimes:Array;		public var numPts:Number;		public var thePolygon:Shape;		public var str_joint_names:String = new String("1RANK,2RKNEE,3RHIP,4LHIP,5LNKEE,6LANK,7RWR,8RELB,9RSO,10LSO,11LELB,12LRW,13NECK,14HEAD");		public var joint_names:Array = str_joint_names.split(",");		public var joint_links:Array=new Array();		public var hitTime:Number;		public var now:Date = new Date();		public var makeActive;				public var lineColor;		public var Mode=READY;//btnFinishShape.visible=false;		function Person14Joints()		{			joint_links[1]=[];			joint_links[2]=[1];			joint_links[3]=[2];			joint_links[4]=[3];			joint_links[5]=[4];			joint_links[6]=[5];			joint_links[7]=[];			joint_links[8]=[7];			joint_links[9]=[8,3];			joint_links[10]=[9,4];			joint_links[11]=[10];			joint_links[12]=[11];			joint_links[13]=[9,10];			joint_links[14]=[13];			hitTime=now.getTime();						stop();			btnRemoveLast.visible=false;			theGude.visible=true;			theGude.gotoAndStop(1);			pdClickArea.addEventListener(MouseEvent.CLICK, handleRegularClick);			btnRemoveLast.addEventListener(MouseEvent.CLICK, onRemoveLastSegmentClick);		}		function onFinishShapeClick(event:MouseEvent):void		{				var now:Date = new Date();			this.hitTime=now.getTime();			thePolygon.graphics.lineTo(ptsX[1], ptsY[1]);			this.Mode=IDLE;			btnRemoveLast.visible=false;			theGude.visible=false;		}//btnFinishShape.addEventListener(MouseEvent.CLICK, onFinishShapeClick);function handleRegularClick(event:MouseEvent):void{	var links;	var n;	var i;	var now:Date;	var key=0	if(event.altKey)	{		key=1;	}		if(this.Mode==IDLE){		trace("Idle")	}else if(this.Mode==READY){		//btnFinishShape.x=event.localX;		//btnFinishShape.y=event.localY;		//btnFinishShape.visible=true;		btnRemoveLast.visible=true;		theGude.visible=true;		//lblRemoveLast.visible=true;		this.Mode=EDITING;				ptsX=new Array();		ptsY=new Array();		keys=new Array();		clickTimes=new Array();		numPts=0;   		thePolygon= new Shape();            thePolygon.graphics.lineStyle(2, lineColor, 1, false, LineScaleMode.VERTICAL,                               CapsStyle.NONE, JointStyle.MITER, 10);		numPts++;		ptsX[numPts]=event.localX;		ptsY[numPts]=event.localY;		keys[numPts]=key;		theGude.gotoAndStop(numPts*5+1);		now = new Date();		clickTimes[numPts]=now.getTime();		 		 thePolygon.graphics.moveTo(event.localX, event.localY);		 links=joint_links[numPts];		 for(i=0;i<links.length;i++)		 {			n=links[i];			thePolygon.graphics.lineTo(ptsX[n], ptsY[n]);		 }		 event.currentTarget.addChild(thePolygon); 			}else{				if(numPts<14)		{		numPts++;		ptsX[numPts]=event.localX;		ptsY[numPts]=event.localY;		keys[numPts]=key;				now = new Date();		clickTimes[numPts]=now.getTime();				theGude.gotoAndStop(numPts*5+1);	 	//thePolygon.graphics.lineTo(event.localX, event.localY); 		 thePolygon.graphics.moveTo(event.localX, event.localY);		 links=joint_links[numPts];		 for(i=0;i<links.length;i++)		 {			 n=links[i];			trace(n); 		 	thePolygon.graphics.moveTo(ptsX[numPts], ptsY[numPts]);			thePolygon.graphics.lineTo(ptsX[n], ptsY[n]);		 }				 if(numPts==14){			this.Mode=IDLE;			//btnFinishShape.visible=false;			btnRemoveLast.visible=false;			theGude.visible=false;			inputImageHolder.visible=false;						var done_event:Event = new Event("my_input_finished");    		this.dispatchEvent(done_event);							 }		}		trace(event.currentTarget.toString() + 			" dispatches MouseEvent. Local coords [" + 			event.localX + "," + event.localY + "] Stage coords [" + 			event.stageX + "," + event.stageY + "]");	}	trace(event.currentTarget.toString() + 			" dispatches MouseEvent. Local coords [" + 			event.localX + "," + event.localY + "] Stage coords [" + 			event.stageX + "," + event.stageY + "]");	now = new Date();	this.hitTime=now.getTime();}////var mouse_localX=0;//var mouse_localY=0;//pdClickArea.addEventListener(MouseEvent.MOUSE_MOVE, mouseTracker);//function mouseTracker(event:MouseEvent):void//{//	mouse_localX=event.localX;//	mouse_localY=event.localY;//	//}////pdClickArea.addEventListener(KeyboardEvent.KEY_UP, handleKeyboard);////function handleKeyboard(event:KeyboardEvent):void//{//	var links;//	var n;//	var i;//	var now:Date;//	var key=event.charCode;//	trace(key);//	if(key=='s' || key=='g'){//	if(this.Mode==IDLE){//		trace("Idle")//	}else if(this.Mode==READY){//		//btnFinishShape.x=event.localX;//		//btnFinishShape.y=event.localY;//		//btnFinishShape.visible=true;//		btnRemoveLast.visible=true;//		theGude.visible=true;//		//lblRemoveLast.visible=true;//		this.Mode=EDITING;//		//		ptsX=new Array();//		ptsY=new Array();//		clickTimes=new Array();//		numPts=0;//   		thePolygon= new Shape();    ////        thePolygon.graphics.lineStyle(2, lineColor, 1, false, LineScaleMode.VERTICAL,//                               CapsStyle.NONE, JointStyle.MITER, 10);////		numPts++;//		ptsX[numPts]=mouse_localX;//		ptsY[numPts]=mouse_localY;//		theGude.gotoAndStop(numPts*5+1);//		now = new Date();//		clickTimes[numPts]=now.getTime();//		// 		 thePolygon.graphics.moveTo(mouse_localX, mouse_localY);//		 links=joint_links[numPts];//		 for(i=0;i<links.length;i++)//		 {//			n=links[i];//			thePolygon.graphics.lineTo(ptsX[n], ptsY[n]);//		 }//		 event.currentTarget.addChild(thePolygon);// 		//	}else{		//		if(numPts<14)//		{//		numPts++;//		ptsX[numPts]=mouse_localX;//		ptsY[numPts]=mouse_localY;//		now = new Date();//		clickTimes[numPts]=now.getTime();//		//		theGude.gotoAndStop(numPts*5+1);//	 	//thePolygon.graphics.lineTo(event.localX, event.localY);//// 		 thePolygon.graphics.moveTo(mouse_localX, mouse_localY);//		 links=joint_links[numPts];//		 for(i=0;i<links.length;i++)//		 {//			 n=links[i];//			trace(n);// 		 	thePolygon.graphics.moveTo(ptsX[numPts], ptsY[numPts]);//			thePolygon.graphics.lineTo(ptsX[n], ptsY[n]);////		 }		//		 if(numPts==14){//			this.Mode=IDLE;//			//btnFinishShape.visible=false;//			btnRemoveLast.visible=false;//			theGude.visible=false;//		 }//		}//		//trace(event.currentTarget.toString() + ////			" dispatches MouseEvent. Local coords [" + ////			event.localX + "," + event.localY + "] Stage coords [" + ////			event.stageX + "," + event.stageY + "]");//	}////	trace(event.currentTarget.toString() + ////			" dispatches MouseEvent. Local coords [" + ////			event.localX + "," + event.localY + "] Stage coords [" + ////			event.stageX + "," + event.stageY + "]");//	now = new Date();//	this.hitTime=now.getTime();//	}//}function onRemoveLastSegmentClick(event:MouseEvent):void{	if(this.Mode == EDITING)	{	var now:Date = new Date();	this.hitTime=now.getTime();	this.thePolygon.graphics.clear();    thePolygon.graphics.lineStyle(2, lineColor, 1, false, LineScaleMode.VERTICAL,                               CapsStyle.NONE, JointStyle.MITER, 10);		if(this.numPts>1)	{		this.numPts--;		//this.thePolygon.graphics.moveTo(ptsX[1], ptsY[1]);		if(this.numPts>1)		{			for(var iPt=2;iPt<=this.numPts;iPt++)			{ 				//thePolygon.graphics.moveTo(ptsX[iPt], ptsY[iPt]);		 		var links=joint_links[iPt];		 		for(var i=0;i<links.length;i++)		 		{			 		var n=links[i];					thePolygon.graphics.moveTo(ptsX[iPt], ptsY[iPt]);					thePolygon.graphics.lineTo(ptsX[n], ptsY[n]);		 		}		 	}		}	}else if(this.numPts==1)	{		this.numPts=0;		this.Mode=READY;	}	theGude.gotoAndStop(numPts*5+1);	}}//function makeDisplayActive(holder){//}//makeActive=makeDisplayActive;		 	 } }