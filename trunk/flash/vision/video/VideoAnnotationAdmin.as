/********************************************************************** Software License Agreement (BSD License)**  Copyright (c) 2008, University of Illinois at Urbana-Champaign*  All rights reserved.**  Redistribution and use in source and binary forms, with or without*  modification, are permitted provided that the following conditions*  are met:**   * Redistributions of source code must retain the above copyright*     notice, this list of conditions and the following disclaimer.*   * Redistributions in binary form must reproduce the above*     copyright notice, this list of conditions and the following*     disclaimer in the documentation and/or other materials provided*     with the distribution.*   * Neither the name of the University of Illinois nor the names of its*     contributors may be used to endorse or promote products derived*     from this software without specific prior written permission.**  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE*  POSSIBILITY OF SUCH DAMAGE.*********************************************************************//***** Author: Alexander Sorokin, Department of Computer Science,*                                  University of Illinois at Urbana-Champaign.* Advised by: David Forsyth.*****/package vision.video{	import flash.events.Event;	import fl.data.DataProvider;	import flash.display.*;	import flash.events.EventDispatcher;	import flash.net.*;	import vision.video.VideoAnnotationModel;	dynamic public class VideoAnnotationAdmin extends EventDispatcher	{		var video_player;		var timeline_editor;		var timeline_event_editor;		//var image_annotation_editor;		var data_model:VideoAnnotationModel;				var video_url;		var mode; 		var annotation_url;		var parameters;				var annotation_controls:Array;				function VideoAnnotationAdmin(){			XML.ignoreWhitespace = false;			data_model=new vision.video.VideoAnnotationModel();			data_model.set_xml(XML("<events/>"));			//data_model.set_video_event();			data_model.set_video_interval(0,0);						annotation_loader=null;			annotation_controls = new Array();		}				public function get_model():VideoAnnotationModel{			return data_model;		}		public function set_video_player(player):void		{			this.video_player=player;		}		public function get_video_player():Object		{			return this.video_player;		}		public function parseParameters():void		{						parameters=XML("<parameters/>");						var paramObj:Object = LoaderInfo(this.video_player.root.loaderInfo).parameters;			var opMode;			if("mode" in paramObj){				opMode=paramObj["mode"];									}else{				opMode="debug_edit";				//opMode="display";			}						this.mode=opMode;			var video_url;			if("video_url" in paramObj){				video_url=paramObj["video_url"];			}else{				//video_url="http://localhost:8080/video/test.flv";				video_url="http://vm7.willowgarage.com:8080/frames/basic-video-s/test.flv";			}						this.video_url=video_url;;						var video_param:XML=XML("<video/>");			video_param.@video_url=video_url;			parameters.appendChild(video_param);						var task_def_url;			if("task_url" in paramObj){				task_def_url=paramObj["task_url"];			}else{				task_def_url="http://vm7.willowgarage.com:8080/tasks/basic-activity.xml";			}						this.task_def_url=task_def_url;			var task_param:XML=XML("<task/>");			task_param.@url=task_def_url;			parameters.appendChild(task_param);						var annotation_url;			if("annotation_url" in paramObj){				annotation_url=paramObj["annotation_url"];									}else{				annotation_url="http://vm7.willowgarage.com:8080/annotations/video_annotation1.xml";			}						this.annotation_url=annotation_url;						var annotation_param:XML=XML("<annotation/>");			annotation_param.@url=annotation_url;			parameters.appendChild(annotation_param);						//Begin loading			nOutstandingTasks=0;			if(this.mode=="display")			{				nOutstandingTasks=nOutstandingTasks+1;				nOutstandingTasks=nOutstandingTasks+1;								load_annotations(this.annotation_url);								load_task(this.task_def_url);							}else{				nOutstandingTasks=nOutstandingTasks+1;								load_task(this.task_def_url);							}			//End loading.		}				public function get_op_mode():String		{			return this.mode;		}		public function is_mode_input():Boolean		{			return (this.mode=="debug_edit" || this.mode=="input" || this.mode=="MT2" || this.mode=="AmazonMTProduction" || this.mode=="AmazonMTSandbox")		}		public function is_mode_display():Boolean		{			return (this.mode=="display")		}		public function run():void		{			this.video_player.source=this.video_url;		}						public function get_all_data():XML		{			return this.get_model().get_xml(); 		}		public function onSubmit(event:Event):void		{			var data_ready_evt:Event = new Event("my_all_data_saved");			this.dispatchEvent(data_ready_evt);		}						var nOutstandingTasks;			var annotation_loader;		public function load_annotations(annotation_URL):void		{						annotation_loader=new URLLoader();							var req:URLRequest = new URLRequest(annotation_URL);			annotation_loader.addEventListener(Event.COMPLETE, on_task_loaded);			annotation_loader.load(req);			}				var task_loader;		public function load_task(task_URL):void		{						task_loader=new URLLoader();							var req:URLRequest = new URLRequest(task_URL);			task_loader.addEventListener(Event.COMPLETE, on_task_loaded);			task_loader.load(req);			}						public function on_task_loaded(event:Event):void		{			//trace("completeHandler: " + loader.data);					nOutstandingTasks=nOutstandingTasks-1;			if (nOutstandingTasks>0){				return;			}						if(task_loader != null){				var task_definition:XML=new XML(task_loader.data);				parameters.task.appendChild(task_definition);								set_control_visibility();			}			if(annotation_loader != null){				var annotation:XML=new XML(annotation_loader.data);				get_model().set_xml(annotation);				if(mode=="debug_edit"||mode=="edit"){					enable_edit();				}				//the_sites_holder.orderElementsByVisibility();			}else{				//m_input_specs.read_task(task_definition,task_definition,this);					}			//m_input_specs.activate();			//m_load_indicator.visible=false;		}						public function set_control_visibility():void		{			for(var o in annotation_controls)			{				annotation_controls[o].visible=false;			}			var ann_type=parameters.task.annotation.annotation[0].@type;			if (ann_type=="text")			{				annotation_controls["text"].visible=true;				annotation_controls["text"].set_admin(this);			}			else if (ann_type=="simple-sentence")			{				annotation_controls["simple-sentence"].visible=true;				annotation_controls["simple-sentence"].set_admin(this);			}		}				public function add_annotation_control(o:String,c):void		{			annotation_controls[o]=c;		}		public function enable_edit():void		{		}					}}