/********************************************************************** Software License Agreement (BSD License)**  Copyright (c) 2008, University of Illinois at Urbana-Champaign*  All rights reserved.**  Redistribution and use in source and binary forms, with or without*  modification, are permitted provided that the following conditions*  are met:**   * Redistributions of source code must retain the above copyright*     notice, this list of conditions and the following disclaimer.*   * Redistributions in binary form must reproduce the above*     copyright notice, this list of conditions and the following*     disclaimer in the documentation and/or other materials provided*     with the distribution.*   * Neither the name of the University of Illinois nor the names of its*     contributors may be used to endorse or promote products derived*     from this software without specific prior written permission.**  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE*  POSSIBILITY OF SUCH DAMAGE.*********************************************************************//***** Author: Alexander Sorokin, Department of Computer Science,*                                  University of Illinois at Urbana-Champaign.* Advised by: David Forsyth.*****/package vision.video{	import flash.events.Event;	import fl.data.DataProvider;	import vision.video.VideoAnnotationEventModel;	dynamic public class VideoAnnotationModel	{		var events:Array;						var video_start;		var video_end;				var current_event:vision.video.VideoAnnotationEventModel;				var current_event_dp:DataProvider;		var all_events_dp:DataProvider;		var active_events_dp:DataProvider;				function VideoAnnotationModel()		{			events=new Array();			current_event_dp=new DataProvider();			all_events_dp=new DataProvider();			active_events_dp=new DataProvider();		}				public function get_xml():XML{			var full_xml=new XML("<events/>");			for(var e=0;e<all_events_dp.length;e++)			{				full_xml.appendChild(all_events_dp.getItemAt(e).get_xml());			}			return full_xml;		}				public function set_xml(xml:XML):void{			for(var e in xml.event)			{				var em=new VideoAnnotationEventModel();				em.set_xml(xml.event[e]);				add_event(em);			}		}				public function has_current_event():Boolean{			return current_event_dp.length>0;		}				public function update_or_set_event(new_evt:VideoAnnotationEventModel):void{			if(! is_current_event_new())			{				update_event(new_evt,get_current_event());			}			else			{				set_current_event(new_evt);			}					}				public function set_current_event(new_current_event):void{			this.current_event=new_current_event;			this.current_event_dp.removeAll();			this.current_event_dp.addItem(this.current_event);			this.current_event_dp.invalidate();		}		public function get_current_event_DP():DataProvider{			return this.current_event_dp;		}		public function get_current_event():VideoAnnotationEventModel{			return VideoAnnotationEventModel(current_event_dp.getItemAt(0));		}		public function get_all_events_DP():DataProvider{			return this.all_events_dp;		}		public function get_active_events_DP():DataProvider{			return this.active_events_dp;		}				public function update_event(new_version,old_version):void{			this.all_events_dp.replaceItem(new_version,old_version);			this.current_event_dp.removeAll();			this.current_event_dp.addItem(new_version);			this.current_event_dp.invalidate();					}		public function add_event(new_version):void{			this.all_events_dp.addItem(new_version);			this.current_event_dp.removeAll();			this.current_event_dp.addItem(new_version);			this.current_event_dp.invalidate();					}		public function set_video_interval(st,et):void{			video_start=st;			video_end=et;		}		public function get_video_start():Number{			return Number(video_start);		}		public function get_video_end():Number{			return Number(video_end);		}		public function get_video_duration():Number{			return get_video_end()-get_video_start();		}				public function select_active_events(t:Number):void{			active_events_dp.removeAll();			for(var e=0;e<all_events_dp.length;e++)			{				var candidate_event=all_events_dp.getItemAt(e)				if(candidate_event.is_active(t))				{					active_events_dp.addItem(candidate_event);				}			}		}				public function is_current_event_new():Boolean{			if(current_event==null)			{				return true;			}			if(current_event.ref_id)			{				return false;			}			return true;		}	}}